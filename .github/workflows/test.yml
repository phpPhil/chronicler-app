# CI/CD Pipeline for Chronicler Testing Framework
name: Testing Framework CI/CD

on:
  # Disabled all automatic triggers - workflow can only be run manually
  workflow_dispatch:
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main ]
  # schedule:
  #   # Run nightly performance tests
  #   - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  COVERAGE_THRESHOLD: 60

jobs:
  # Code Quality and Linting
  quality-check:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        continue-on-error: false
        
      - name: Run TypeScript type checking
        run: npm run typecheck
        continue-on-error: false
        
      - name: Check code formatting
        run: npx prettier --check .
        continue-on-error: true

  # Unit and Integration Tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-check
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run backend unit tests
        run: npm run backend:test
        env:
          NODE_ENV: test
          
      - name: Run backend integration tests
        run: npm run backend:test -- tests/integration/
        env:
          NODE_ENV: test
          
      - name: Generate coverage report
        run: npm run backend:test -- --coverage
        env:
          NODE_ENV: test
          
      - name: Generate API documentation
        run: |
          cd backend
          npm run docs:generate
          
      - name: Upload API documentation
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation-backend-node${{ matrix.node-version }}-${{ github.run_number }}-${{ github.run_attempt }}
          path: backend/docs/
          retention-days: 30
          
      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality-check
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Free up memory
        run: |
          sudo apt-get clean
          docker system prune -af || true
          
      - name: Run frontend unit tests
        run: npm run frontend:test -- --coverage --watchAll=false --maxWorkers=1 --forceExit --detectMemoryLeaks
        env:
          NODE_ENV: test
          CI: true
          NODE_OPTIONS: --max_old_space_size=6144
          
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  # Performance and Load Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test-backend, test-frontend]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start application
        run: |
          npm run backend:start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for application to start
          timeout 30 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 1; done'
        
      - name: Run performance benchmarks
        run: node tests/performance/benchmark.test.js
        env:
          NODE_ENV: production
          
      - name: Run load tests
        run: node tests/performance/load-testing.js
        env:
          TEST_BASE_URL: http://localhost:3001
          LOAD_TEST_DURATION: 30
          LOAD_TEST_CONNECTIONS: 20
          
      - name: Stop application
        run: kill $APP_PID || true
        if: always()
        
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results-perf-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            performance-report.json
            load-test-report.json
          retention-days: 30

  # End-to-End Tests - DISABLED: Playwright not properly configured
  e2e-tests:
    name: E2E Tests (Skipped - Configuration Issues)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test-backend, test-frontend]
    if: false  # Skip E2E tests - Playwright setup incomplete
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build application
        run: npm run build
        
      - name: Start application for E2E tests
        run: |
          npm run start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for both frontend and backend
          timeout 60 bash -c 'until curl -f http://localhost:3000 && curl -f http://localhost:3001/api/health; do sleep 2; done'
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          
      - name: Stop application
        run: kill $APP_PID || true
        if: always()
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-e2e-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # Security Testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: Run security linting
        run: |
          npx eslint . --ext .js,.ts,.tsx --config .eslintrc.security.js || true
        continue-on-error: true
        
      - name: Check for hardcoded secrets
        run: |
          # Simple grep for common secret patterns
          echo "Checking for potential secrets..."
          if grep -r -E "(password|token|key|secret).*=.*['\"][^'\"]{8,}" --include="*.js" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "⚠️ Potential hardcoded secrets found"
            exit 1
          else
            echo "✅ No obvious hardcoded secrets found"
          fi
        continue-on-error: true

  # Coverage Analysis and Reporting
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test-backend, test-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate combined coverage report
        run: |
          npm run test:coverage
          
      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          if [ -f ./coverage/coverage-summary.json ]; then
            node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const threshold = ${{ env.COVERAGE_THRESHOLD }};
            const totalLines = coverage.total.lines.pct;
            const totalFunctions = coverage.total.functions.pct;
            const totalBranches = coverage.total.branches.pct;
            
            console.log(\`Coverage: Lines \${totalLines}%, Functions \${totalFunctions}%, Branches \${totalBranches}%\`);
            
            if (totalLines < threshold || totalFunctions < threshold || totalBranches < threshold) {
              console.error(\`❌ Coverage below threshold of \${threshold}%\`);
              process.exit(1);
            } else {
              console.log(\`✅ Coverage meets threshold of \${threshold}%\`);
            }
            "
          else
            echo "⚠️ Coverage file not found, skipping threshold check"
          fi
          
      - name: Generate coverage badge
        run: |
          npm install -g coverage-badge-creator
          coverage-badge-creator --output coverage-badge.svg
          
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-coverage-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            coverage/
            coverage-badge.svg
          retention-days: 30

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [quality-check, test-backend, test-frontend, coverage-analysis]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate test summary
        run: |
          echo "# 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Quality Check: ${{ needs.quality-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## Backend Tests: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## Frontend Tests: ${{ needs.test-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## E2E Tests: skipped (Playwright configuration incomplete)" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage Analysis: ${{ needs.coverage-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.performance-tests.result }}" != "" ]]; then
            echo "## Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Pipeline Status" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.quality-check.result }}" == "success" && 
                "${{ needs.test-backend.result }}" == "success" && 
                "${{ needs.test-frontend.result }}" == "success" && 
                "${{ needs.coverage-analysis.result }}" == "success" ]]; then
            echo "✅ All tests passing!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Please check the individual job results." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `
            ## 🧪 Test Results for PR #${{ github.event.number }}
            
            | Test Suite | Status |
            |------------|--------|
            | Quality Check | ${{ needs.quality-check.result }} |
            | Backend Tests | ${{ needs.test-backend.result }} |
            | Frontend Tests | ${{ needs.test-frontend.result }} |
            | E2E Tests | skipped (config incomplete) |
            | Coverage Analysis | ${{ needs.coverage-analysis.result }} |
            
            **Overall Status:** ${
              ['${{ needs.quality-check.result }}', '${{ needs.test-backend.result }}', 
               '${{ needs.test-frontend.result }}', '${{ needs.coverage-analysis.result }}'].every(status => status === 'success') 
              ? '✅ All tests passing!' 
              : '❌ Some tests failed'
            }
            
            View detailed results in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

# Scheduled Performance Monitoring
  nightly-performance:
    name: Nightly Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Run extended performance tests
        run: |
          npm run start &
          APP_PID=$!
          
          # Wait for startup
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'
          
          # Run comprehensive performance tests
          LOAD_TEST_DURATION=300 LOAD_TEST_CONNECTIONS=50 node tests/performance/load-testing.js
          
          kill $APP_PID
          
      - name: Create performance report
        run: |
          echo "# 📊 Nightly Performance Report - $(date)" > performance-report.md
          echo "" >> performance-report.md
          echo "Performance monitoring completed successfully." >> performance-report.md
          
      - name: Create issue if performance degrades
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🐛 Performance degradation detected',
              body: `
              ## Performance Issue Detected
              
              The nightly performance tests have detected a potential performance degradation.
              
              **Run Details:**
              - Date: ${new Date().toISOString()}
              - Workflow: ${context.workflow}
              - Run ID: ${context.runId}
              
              Please investigate the performance metrics and take appropriate action.
              
              **Next Steps:**
              1. Review the test results in the Actions tab
              2. Profile the application for performance bottlenecks
              3. Consider rolling back recent changes if necessary
              
              cc: @team-performance
              `,
              labels: ['bug', 'performance', 'automated']
            });

> frontend@0.1.0 test
> react-scripts test --maxWorkers=2 --watchAll=false

FAIL src/tests/personas/language-switching.test.tsx
  ‚óè Language Switching - Persona-Based Testing ‚Ä∫ SeniorChroniclerElf Persona - Sindarin Interface ‚Ä∫ loads application in default Sindarin language

    TestingLibraryElementError: Unable to find an element with the text: 3r9n`i0j. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App   desktop-app"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"header-content"[39m
              [36m>[39m
                [36m<h1[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mChronicler[0m
                [36m</h1>[39m
                [36m<p[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mDistance Calculation Tool[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<div[39m
                [33mclass[39m=[32m"language-toggle-container"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"language-toggle-container header-language-toggle"[39m
                [36m>[39m
                  [36m<button[39m
                    [33maria-label[39m=[32m"Switch to Hobbit (English) language"[39m
                    [33mclass[39m=[32m"language-toggle language-toggle--small elvish-mode"[39m
                    [33mtitle[39m=[32m"Currently in Elf (Sindarin) mode. Click to switch."[39m
                  [36m>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__icon"[39m
                    [36m>[39m
                      [0müßô‚Äç‚ôÇÔ∏è[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__text"[39m
                    [36m>[39m
                      [0mHobbit (English)[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__arrow"[39m
                    [36m>[39m
                      [0m‚ü∑[0m
                    [36m</span>[39m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</header>[39m
          [36m<main[39m
            [33mclass[39m=[32m"App-main "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div>[39m
                [36m<div>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"upload-section "[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"file-upload-component"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33maria-describedby[39m=[32m"upload-instructions"[39m
                        [33maria-label[39m=[32m"File upload zone"[39m
                        [33mclass[39m=[32m"upload-zone upload-zone--desktop upload-zone--lg"[39m
                        [33mdata-testid[39m=[32m"upload-zone"[39m
                        [33mrole[39m=[32m"button"[39m
                        [33mtabindex[39m=[32m"0"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"upload-zone-content "[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"upload-instructions "[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-icon "[39m
                            [36m>[39m
                              [0m‚¨ÜÔ∏è[0m
                            [36m</div>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-text"[39m
                            [36m>[39m
                              [36m<p>[39m
                                [36m<strong[39m
                                  [33mclass[39m=[32m"tengwar-text "[39m
                                [36m>[39m
                                  [0mUpload your text file[0m
                                [36m</strong>[39m
                              [36m</p>[39m
                              [36m<p[39m
                                [33mclass[39m=[32m"tengwar-text"[39m
                              [36m>[39m
                                [0mor[0m
                                [0m [0m
                                [36m<button[39m
                                  [33mclass[39m=[32m"browse-button tengwar-text"[39m
                                  [33mtype[39m=[32m"button"[39m
                                [36m>[39m
                                  [0mbrowse[0m
                                [36m</button>[39m
                                [0m [0m
                                [0mto select[0m
                              [36m</p>[39m
                            [36m</div>[39m
                          [36m</div>[39m
                        [36m</div>[39m
                        [36m<input[39m
                          [33maccept[39m=[32m".txt"[39m
                          [33maria-describedby[39m=[32m"upload-instructions"[39m
                          [33mclass[39m=[32m"file-input"[39m
                          [33mdata-testid[39m=[32m"file-input"[39m
                          [33mtype[39m=[32m"file"[39m
                        [36m/>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"upload-requirements"[39m
                        [33mid[39m=[32m"upload-instructions"[39m
                      [36m>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mText files (.txt)[0m
                          [0m ‚Ä¢ [0m
                          [0mMax 10MB[0m
                        [36m</p>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mTwo columns of integers separated by spaces[0m
                        [36m</p>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33maria-live[39m=[32m"polite"[39m
                        [33mclass[39m=[32m"sr-only"[39m
                        [33mrole[39m=[32m"status"[39m
                      [36m/>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</main>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      32 |       
      33 |       // Verify app loads in Sindarin (default)
    > 34 |       expect(screen.getByText('3r9n`i0j')).toBeInTheDocument(); // "Chronicler" in Tengwar
         |                     ^
      35 |       
      36 |       // Verify language toggle shows "Hobbitish" (option to switch to English)
      37 |       expect(screen.getByText('Hobbitish')).toBeInTheDocument();

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (../node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/personas/language-switching.test.tsx:34:21)

  ‚óè Language Switching - Persona-Based Testing ‚Ä∫ SeniorChroniclerElf Persona - Sindarin Interface ‚Ä∫ can switch from Sindarin to English successfully

    TestingLibraryElementError: Unable to find an element with the text: 3r9n`i0j. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App   desktop-app"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"header-content"[39m
              [36m>[39m
                [36m<h1[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mChronicler[0m
                [36m</h1>[39m
                [36m<p[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mDistance Calculation Tool[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<div[39m
                [33mclass[39m=[32m"language-toggle-container"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"language-toggle-container header-language-toggle"[39m
                [36m>[39m
                  [36m<button[39m
                    [33maria-label[39m=[32m"Switch to Hobbit (English) language"[39m
                    [33mclass[39m=[32m"language-toggle language-toggle--small elvish-mode"[39m
                    [33mtitle[39m=[32m"Currently in Elf (Sindarin) mode. Click to switch."[39m
                  [36m>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__icon"[39m
                    [36m>[39m
                      [0müßô‚Äç‚ôÇÔ∏è[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__text"[39m
                    [36m>[39m
                      [0mHobbit (English)[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__arrow"[39m
                    [36m>[39m
                      [0m‚ü∑[0m
                    [36m</span>[39m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</header>[39m
          [36m<main[39m
            [33mclass[39m=[32m"App-main "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div>[39m
                [36m<div>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"upload-section "[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"file-upload-component"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33maria-describedby[39m=[32m"upload-instructions"[39m
                        [33maria-label[39m=[32m"File upload zone"[39m
                        [33mclass[39m=[32m"upload-zone upload-zone--desktop upload-zone--lg"[39m
                        [33mdata-testid[39m=[32m"upload-zone"[39m
                        [33mrole[39m=[32m"button"[39m
                        [33mtabindex[39m=[32m"0"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"upload-zone-content "[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"upload-instructions "[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-icon "[39m
                            [36m>[39m
                              [0m‚¨ÜÔ∏è[0m
                            [36m</div>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-text"[39m
                            [36m>[39m
                              [36m<p>[39m
                                [36m<strong[39m
                                  [33mclass[39m=[32m"tengwar-text "[39m
                                [36m>[39m
                                  [0mUpload your text file[0m
                                [36m</strong>[39m
                              [36m</p>[39m
                              [36m<p[39m
                                [33mclass[39m=[32m"tengwar-text"[39m
                              [36m>[39m
                                [0mor[0m
                                [0m [0m
                                [36m<button[39m
                                  [33mclass[39m=[32m"browse-button tengwar-text"[39m
                                  [33mtype[39m=[32m"button"[39m
                                [36m>[39m
                                  [0mbrowse[0m
                                [36m</button>[39m
                                [0m [0m
                                [0mto select[0m
                              [36m</p>[39m
                            [36m</div>[39m
                          [36m</div>[39m
                        [36m</div>[39m
                        [36m<input[39m
                          [33maccept[39m=[32m".txt"[39m
                          [33maria-describedby[39m=[32m"upload-instructions"[39m
                          [33mclass[39m=[32m"file-input"[39m
                          [33mdata-testid[39m=[32m"file-input"[39m
                          [33mtype[39m=[32m"file"[39m
                        [36m/>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"upload-requirements"[39m
                        [33mid[39m=[32m"upload-instructions"[39m
                      [36m>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mText files (.txt)[0m
                          [0m ‚Ä¢ [0m
                          [0mMax 10MB[0m
                        [36m</p>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mTwo columns of integers separated by spaces[0m
                        [36m</p>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33maria-live[39m=[32m"polite"[39m
                        [33mclass[39m=[32m"sr-only"[39m
                        [33mrole[39m=[32m"status"[39m
                      [36m/>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</main>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      50 |       
      51 |       // Start in Sindarin
    > 52 |       expect(screen.getByText('3r9n`i0j')).toBeInTheDocument();
         |                     ^
      53 |       
      54 |       // Click language toggle to switch to English
      55 |       const languageToggle = screen.getByText('Hobbitish');

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (../node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/personas/language-switching.test.tsx:52:21)

  ‚óè Language Switching - Persona-Based Testing ‚Ä∫ SeniorChroniclerElf Persona - Sindarin Interface ‚Ä∫ maintains Tengwar font loading and cultural elements during switch

    TestingLibraryElementError: Unable to find an element with the text: /[\u{E000}-\u{F8FF}]/u. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App   desktop-app"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"header-content"[39m
              [36m>[39m
                [36m<h1[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mChronicler[0m
                [36m</h1>[39m
                [36m<p[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mDistance Calculation Tool[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<div[39m
                [33mclass[39m=[32m"language-toggle-container"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"language-toggle-container header-language-toggle"[39m
                [36m>[39m
                  [36m<button[39m
                    [33maria-label[39m=[32m"Switch to Hobbit (English) language"[39m
                    [33mclass[39m=[32m"language-toggle language-toggle--small elvish-mode"[39m
                    [33mtitle[39m=[32m"Currently in Elf (Sindarin) mode. Click to switch."[39m
                  [36m>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__icon"[39m
                    [36m>[39m
                      [0müßô‚Äç‚ôÇÔ∏è[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__text"[39m
                    [36m>[39m
                      [0mHobbit (English)[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__arrow"[39m
                    [36m>[39m
                      [0m‚ü∑[0m
                    [36m</span>[39m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</header>[39m
          [36m<main[39m
            [33mclass[39m=[32m"App-main "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div>[39m
                [36m<div>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"upload-section "[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"file-upload-component"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33maria-describedby[39m=[32m"upload-instructions"[39m
                        [33maria-label[39m=[32m"File upload zone"[39m
                        [33mclass[39m=[32m"upload-zone upload-zone--desktop upload-zone--lg"[39m
                        [33mdata-testid[39m=[32m"upload-zone"[39m
                        [33mrole[39m=[32m"button"[39m
                        [33mtabindex[39m=[32m"0"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"upload-zone-content "[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"upload-instructions "[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-icon "[39m
                            [36m>[39m
                              [0m‚¨ÜÔ∏è[0m
                            [36m</div>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-text"[39m
                            [36m>[39m
                              [36m<p>[39m
                                [36m<strong[39m
                                  [33mclass[39m=[32m"tengwar-text "[39m
                                [36m>[39m
                                  [0mUpload your text file[0m
                                [36m</strong>[39m
                              [36m</p>[39m
                              [36m<p[39m
                                [33mclass[39m=[32m"tengwar-text"[39m
                              [36m>[39m
                                [0mor[0m
                                [0m [0m
                                [36m<button[39m
                                  [33mclass[39m=[32m"browse-button tengwar-text"[39m
                                  [33mtype[39m=[32m"button"[39m
                                [36m>[39m
                                  [0mbrowse[0m
                                [36m</button>[39m
                                [0m [0m
                                [0mto select[0m
                              [36m</p>[39m
                            [36m</div>[39m
                          [36m</div>[39m
                        [36m</div>[39m
                        [36m<input[39m
                          [33maccept[39m=[32m".txt"[39m
                          [33maria-describedby[39m=[32m"upload-instructions"[39m
                          [33mclass[39m=[32m"file-input"[39m
                          [33mdata-testid[39m=[32m"file-input"[39m
                          [33mtype[39m=[32m"file"[39m
                        [36m/>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"upload-requirements"[39m
                        [33mid[39m=[32m"upload-instructions"[39m
                      [36m>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mText files (.txt)[0m
                          [0m ‚Ä¢ [0m
                          [0mMax 10MB[0m
                        [36m</p>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mTwo columns of integers separated by spaces[0m
                        [36m</p>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33maria-live[39m=[32m"polite"[39m
                        [33mclass[39m=[32m"sr-only"[39m
                        [33mrole[39m=[32m"status"[39m
                      [36m/>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</main>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      76 |       
      77 |       // Verify Tengwar elements are present initially
    > 78 |       const tengwarElements = screen.getAllByText(/[\u{E000}-\u{F8FF}]/u);
         |                                      ^
      79 |       expect(tengwarElements.length).toBeGreaterThan(0);
      80 |       
      81 |       // Switch to English

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at getAllByText (../node_modules/@testing-library/dom/dist/query-helpers.js:109:15)
      at Object.<anonymous> (src/tests/personas/language-switching.test.tsx:78:38)

  ‚óè Language Switching - Persona-Based Testing ‚Ä∫ Pip Proudfoot (Hobbit) Persona - English Interface ‚Ä∫ can quickly find and use language toggle from Sindarin default

    TestingLibraryElementError: Unable to find an element with the text: 3r9n`i0j. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App   desktop-app"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"header-content"[39m
              [36m>[39m
                [36m<h1[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mChronicler[0m
                [36m</h1>[39m
                [36m<p[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mDistance Calculation Tool[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<div[39m
                [33mclass[39m=[32m"language-toggle-container"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"language-toggle-container header-language-toggle"[39m
                [36m>[39m
                  [36m<button[39m
                    [33maria-label[39m=[32m"Switch to Hobbit (English) language"[39m
                    [33mclass[39m=[32m"language-toggle language-toggle--small elvish-mode"[39m
                    [33mtitle[39m=[32m"Currently in Elf (Sindarin) mode. Click to switch."[39m
                  [36m>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__icon"[39m
                    [36m>[39m
                      [0müßô‚Äç‚ôÇÔ∏è[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__text"[39m
                    [36m>[39m
                      [0mHobbit (English)[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__arrow"[39m
                    [36m>[39m
                      [0m‚ü∑[0m
                    [36m</span>[39m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</header>[39m
          [36m<main[39m
            [33mclass[39m=[32m"App-main "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div>[39m
                [36m<div>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"upload-section "[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"file-upload-component"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33maria-describedby[39m=[32m"upload-instructions"[39m
                        [33maria-label[39m=[32m"File upload zone"[39m
                        [33mclass[39m=[32m"upload-zone upload-zone--desktop upload-zone--lg"[39m
                        [33mdata-testid[39m=[32m"upload-zone"[39m
                        [33mrole[39m=[32m"button"[39m
                        [33mtabindex[39m=[32m"0"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"upload-zone-content "[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"upload-instructions "[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-icon "[39m
                            [36m>[39m
                              [0m‚¨ÜÔ∏è[0m
                            [36m</div>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-text"[39m
                            [36m>[39m
                              [36m<p>[39m
                                [36m<strong[39m
                                  [33mclass[39m=[32m"tengwar-text "[39m
                                [36m>[39m
                                  [0mUpload your text file[0m
                                [36m</strong>[39m
                              [36m</p>[39m
                              [36m<p[39m
                                [33mclass[39m=[32m"tengwar-text"[39m
                              [36m>[39m
                                [0mor[0m
                                [0m [0m
                                [36m<button[39m
                                  [33mclass[39m=[32m"browse-button tengwar-text"[39m
                                  [33mtype[39m=[32m"button"[39m
                                [36m>[39m
                                  [0mbrowse[0m
                                [36m</button>[39m
                                [0m [0m
                                [0mto select[0m
                              [36m</p>[39m
                            [36m</div>[39m
                          [36m</div>[39m
                        [36m</div>[39m
                        [36m<input[39m
                          [33maccept[39m=[32m".txt"[39m
                          [33maria-describedby[39m=[32m"upload-instructions"[39m
                          [33mclass[39m=[32m"file-input"[39m
                          [33mdata-testid[39m=[32m"file-input"[39m
                          [33mtype[39m=[32m"file"[39m
                        [36m/>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"upload-requirements"[39m
                        [33mid[39m=[32m"upload-instructions"[39m
                      [36m>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mText files (.txt)[0m
                          [0m ‚Ä¢ [0m
                          [0mMax 10MB[0m
                        [36m</p>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mTwo columns of integers separated by spaces[0m
                        [36m</p>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33maria-live[39m=[32m"polite"[39m
                        [33mclass[39m=[32m"sr-only"[39m
                        [33mrole[39m=[32m"status"[39m
                      [36m/>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</main>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      103 |       
      104 |       // Simulate Hobbit user arriving at Sindarin interface
    > 105 |       expect(screen.getByText('3r9n`i0j')).toBeInTheDocument();
          |                     ^
      106 |       
      107 |       // Should easily find "Hobbitish" toggle (clear English label)
      108 |       const languageToggle = screen.getByText('Hobbitish');

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (../node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/personas/language-switching.test.tsx:105:21)

  ‚óè Language Switching - Persona-Based Testing ‚Ä∫ Pip Proudfoot (Hobbit) Persona - English Interface ‚Ä∫ English interface maintains professional tone and clarity

    TestingLibraryElementError: Unable to find an element with the text: Hobbitish. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App   desktop-app"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"header-content"[39m
              [36m>[39m
                [36m<h1[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mChronicler[0m
                [36m</h1>[39m
                [36m<p[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mDistance Calculation Tool[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<div[39m
                [33mclass[39m=[32m"language-toggle-container"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"language-toggle-container header-language-toggle"[39m
                [36m>[39m
                  [36m<button[39m
                    [33maria-label[39m=[32m"Switch to Hobbit (English) language"[39m
                    [33mclass[39m=[32m"language-toggle language-toggle--small elvish-mode"[39m
                    [33mtitle[39m=[32m"Currently in Elf (Sindarin) mode. Click to switch."[39m
                  [36m>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__icon"[39m
                    [36m>[39m
                      [0müßô‚Äç‚ôÇÔ∏è[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__text"[39m
                    [36m>[39m
                      [0mHobbit (English)[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__arrow"[39m
                    [36m>[39m
                      [0m‚ü∑[0m
                    [36m</span>[39m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</header>[39m
          [36m<main[39m
            [33mclass[39m=[32m"App-main "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div>[39m
                [36m<div>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"upload-section "[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"file-upload-component"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33maria-describedby[39m=[32m"upload-instructions"[39m
                        [33maria-label[39m=[32m"File upload zone"[39m
                        [33mclass[39m=[32m"upload-zone upload-zone--desktop upload-zone--lg"[39m
                        [33mdata-testid[39m=[32m"upload-zone"[39m
                        [33mrole[39m=[32m"button"[39m
                        [33mtabindex[39m=[32m"0"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"upload-zone-content "[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"upload-instructions "[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-icon "[39m
                            [36m>[39m
                              [0m‚¨ÜÔ∏è[0m
                            [36m</div>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-text"[39m
                            [36m>[39m
                              [36m<p>[39m
                                [36m<strong[39m
                                  [33mclass[39m=[32m"tengwar-text "[39m
                                [36m>[39m
                                  [0mUpload your text file[0m
                                [36m</strong>[39m
                              [36m</p>[39m
                              [36m<p[39m
                                [33mclass[39m=[32m"tengwar-text"[39m
                              [36m>[39m
                                [0mor[0m
                                [0m [0m
                                [36m<button[39m
                                  [33mclass[39m=[32m"browse-button tengwar-text"[39m
                                  [33mtype[39m=[32m"button"[39m
                                [36m>[39m
                                  [0mbrowse[0m
                                [36m</button>[39m
                                [0m [0m
                                [0mto select[0m
                              [36m</p>[39m
                            [36m</div>[39m
                          [36m</div>[39m
                        [36m</div>[39m
                        [36m<input[39m
                          [33maccept[39m=[32m".txt"[39m
                          [33maria-describedby[39m=[32m"upload-instructions"[39m
                          [33mclass[39m=[32m"file-input"[39m
                          [33mdata-testid[39m=[32m"file-input"[39m
                          [33mtype[39m=[32m"file"[39m
                        [36m/>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"upload-requirements"[39m
                        [33mid[39m=[32m"upload-instructions"[39m
                      [36m>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mText files (.txt)[0m
                          [0m ‚Ä¢ [0m
                          [0mMax 10MB[0m
                        [36m</p>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mTwo columns of integers separated by spaces[0m
                        [36m</p>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33maria-live[39m=[32m"polite"[39m
                        [33mclass[39m=[32m"sr-only"[39m
                        [33mrole[39m=[32m"status"[39m
                      [36m/>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</main>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      132 |       
      133 |       // Switch to English
    > 134 |       await userEvent.click(screen.getByText('Hobbitish'));
          |                                    ^
      135 |       await waitFor(() => {
      136 |         (global as any).mockLanguage = 'english';
      137 |       });

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (../node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/personas/language-switching.test.tsx:134:36)

  ‚óè Language Switching - Persona-Based Testing ‚Ä∫ Pip Proudfoot (Hobbit) Persona - English Interface ‚Ä∫ completes full workflow in English without cultural barriers

    TestingLibraryElementError: Unable to find an element with the text: Hobbitish. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App   desktop-app"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"header-content"[39m
              [36m>[39m
                [36m<h1[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mChronicler[0m
                [36m</h1>[39m
                [36m<p[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mDistance Calculation Tool[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<div[39m
                [33mclass[39m=[32m"language-toggle-container"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"language-toggle-container header-language-toggle"[39m
                [36m>[39m
                  [36m<button[39m
                    [33maria-label[39m=[32m"Switch to Hobbit (English) language"[39m
                    [33mclass[39m=[32m"language-toggle language-toggle--small elvish-mode"[39m
                    [33mtitle[39m=[32m"Currently in Elf (Sindarin) mode. Click to switch."[39m
                  [36m>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__icon"[39m
                    [36m>[39m
                      [0müßô‚Äç‚ôÇÔ∏è[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__text"[39m
                    [36m>[39m
                      [0mHobbit (English)[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__arrow"[39m
                    [36m>[39m
                      [0m‚ü∑[0m
                    [36m</span>[39m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</header>[39m
          [36m<main[39m
            [33mclass[39m=[32m"App-main "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div>[39m
                [36m<div>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"upload-section "[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"file-upload-component"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33maria-describedby[39m=[32m"upload-instructions"[39m
                        [33maria-label[39m=[32m"File upload zone"[39m
                        [33mclass[39m=[32m"upload-zone upload-zone--desktop upload-zone--lg"[39m
                        [33mdata-testid[39m=[32m"upload-zone"[39m
                        [33mrole[39m=[32m"button"[39m
                        [33mtabindex[39m=[32m"0"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"upload-zone-content "[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"upload-instructions "[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-icon "[39m
                            [36m>[39m
                              [0m‚¨ÜÔ∏è[0m
                            [36m</div>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-text"[39m
                            [36m>[39m
                              [36m<p>[39m
                                [36m<strong[39m
                                  [33mclass[39m=[32m"tengwar-text "[39m
                                [36m>[39m
                                  [0mUpload your text file[0m
                                [36m</strong>[39m
                              [36m</p>[39m
                              [36m<p[39m
                                [33mclass[39m=[32m"tengwar-text"[39m
                              [36m>[39m
                                [0mor[0m
                                [0m [0m
                                [36m<button[39m
                                  [33mclass[39m=[32m"browse-button tengwar-text"[39m
                                  [33mtype[39m=[32m"button"[39m
                                [36m>[39m
                                  [0mbrowse[0m
                                [36m</button>[39m
                                [0m [0m
                                [0mto select[0m
                              [36m</p>[39m
                            [36m</div>[39m
                          [36m</div>[39m
                        [36m</div>[39m
                        [36m<input[39m
                          [33maccept[39m=[32m".txt"[39m
                          [33maria-describedby[39m=[32m"upload-instructions"[39m
                          [33mclass[39m=[32m"file-input"[39m
                          [33mdata-testid[39m=[32m"file-input"[39m
                          [33mtype[39m=[32m"file"[39m
                        [36m/>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"upload-requirements"[39m
                        [33mid[39m=[32m"upload-instructions"[39m
                      [36m>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mText files (.txt)[0m
                          [0m ‚Ä¢ [0m
                          [0mMax 10MB[0m
                        [36m</p>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mTwo columns of integers separated by spaces[0m
                        [36m</p>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33maria-live[39m=[32m"polite"[39m
                        [33mclass[39m=[32m"sr-only"[39m
                        [33mrole[39m=[32m"status"[39m
                      [36m/>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</main>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      158 |       
      159 |       // Switch to English immediately
    > 160 |       await userEvent.click(screen.getByText('Hobbitish'));
          |                                    ^
      161 |       await waitFor(() => {
      162 |         (global as any).mockLanguage = 'english';
      163 |       });

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (../node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/personas/language-switching.test.tsx:160:36)

  ‚óè Language Switching - Persona-Based Testing ‚Ä∫ Pip Proudfoot (Hobbit) Persona - English Interface ‚Ä∫ English interface maintains accessibility compliance

    TestingLibraryElementError: Unable to find an element with the text: Hobbitish. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App   desktop-app"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"header-content"[39m
              [36m>[39m
                [36m<h1[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mChronicler[0m
                [36m</h1>[39m
                [36m<p[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mDistance Calculation Tool[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<div[39m
                [33mclass[39m=[32m"language-toggle-container"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"language-toggle-container header-language-toggle"[39m
                [36m>[39m
                  [36m<button[39m
                    [33maria-label[39m=[32m"Switch to Hobbit (English) language"[39m
                    [33mclass[39m=[32m"language-toggle language-toggle--small elvish-mode"[39m
                    [33mtitle[39m=[32m"Currently in Elf (Sindarin) mode. Click to switch."[39m
                  [36m>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__icon"[39m
                    [36m>[39m
                      [0müßô‚Äç‚ôÇÔ∏è[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__text"[39m
                    [36m>[39m
                      [0mHobbit (English)[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__arrow"[39m
                    [36m>[39m
                      [0m‚ü∑[0m
                    [36m</span>[39m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</header>[39m
          [36m<main[39m
            [33mclass[39m=[32m"App-main "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div>[39m
                [36m<div>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"upload-section "[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"file-upload-component"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33maria-describedby[39m=[32m"upload-instructions"[39m
                        [33maria-label[39m=[32m"File upload zone"[39m
                        [33mclass[39m=[32m"upload-zone upload-zone--desktop upload-zone--lg"[39m
                        [33mdata-testid[39m=[32m"upload-zone"[39m
                        [33mrole[39m=[32m"button"[39m
                        [33mtabindex[39m=[32m"0"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"upload-zone-content "[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"upload-instructions "[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-icon "[39m
                            [36m>[39m
                              [0m‚¨ÜÔ∏è[0m
                            [36m</div>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-text"[39m
                            [36m>[39m
                              [36m<p>[39m
                                [36m<strong[39m
                                  [33mclass[39m=[32m"tengwar-text "[39m
                                [36m>[39m
                                  [0mUpload your text file[0m
                                [36m</strong>[39m
                              [36m</p>[39m
                              [36m<p[39m
                                [33mclass[39m=[32m"tengwar-text"[39m
                              [36m>[39m
                                [0mor[0m
                                [0m [0m
                                [36m<button[39m
                                  [33mclass[39m=[32m"browse-button tengwar-text"[39m
                                  [33mtype[39m=[32m"button"[39m
                                [36m>[39m
                                  [0mbrowse[0m
                                [36m</button>[39m
                                [0m [0m
                                [0mto select[0m
                              [36m</p>[39m
                            [36m</div>[39m
                          [36m</div>[39m
                        [36m</div>[39m
                        [36m<input[39m
                          [33maccept[39m=[32m".txt"[39m
                          [33maria-describedby[39m=[32m"upload-instructions"[39m
                          [33mclass[39m=[32m"file-input"[39m
                          [33mdata-testid[39m=[32m"file-input"[39m
                          [33mtype[39m=[32m"file"[39m
                        [36m/>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"upload-requirements"[39m
                        [33mid[39m=[32m"upload-instructions"[39m
                      [36m>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mText files (.txt)[0m
                          [0m ‚Ä¢ [0m
                          [0mMax 10MB[0m
                        [36m</p>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mTwo columns of integers separated by spaces[0m
                        [36m</p>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33maria-live[39m=[32m"polite"[39m
                        [33mclass[39m=[32m"sr-only"[39m
                        [33mrole[39m=[32m"status"[39m
                      [36m/>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</main>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      178 |       
      179 |       // Switch to English
    > 180 |       await userEvent.click(screen.getByText('Hobbitish'));
          |                                    ^
      181 |       await waitFor(() => {
      182 |         (global as any).mockLanguage = 'english';
      183 |       });

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (../node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/personas/language-switching.test.tsx:180:36)

  ‚óè Language Switching - Persona-Based Testing ‚Ä∫ Bidirectional Language Switching ‚Ä∫ can switch between languages multiple times without issues

    TestingLibraryElementError: Unable to find an element with the text: 3r9n`i0j. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App   desktop-app"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"header-content"[39m
              [36m>[39m
                [36m<h1[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mChronicler[0m
                [36m</h1>[39m
                [36m<p[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mDistance Calculation Tool[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<div[39m
                [33mclass[39m=[32m"language-toggle-container"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"language-toggle-container header-language-toggle"[39m
                [36m>[39m
                  [36m<button[39m
                    [33maria-label[39m=[32m"Switch to Hobbit (English) language"[39m
                    [33mclass[39m=[32m"language-toggle language-toggle--small elvish-mode"[39m
                    [33mtitle[39m=[32m"Currently in Elf (Sindarin) mode. Click to switch."[39m
                  [36m>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__icon"[39m
                    [36m>[39m
                      [0müßô‚Äç‚ôÇÔ∏è[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__text"[39m
                    [36m>[39m
                      [0mHobbit (English)[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__arrow"[39m
                    [36m>[39m
                      [0m‚ü∑[0m
                    [36m</span>[39m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</header>[39m
          [36m<main[39m
            [33mclass[39m=[32m"App-main "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div>[39m
                [36m<div>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"upload-section "[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"file-upload-component"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33maria-describedby[39m=[32m"upload-instructions"[39m
                        [33maria-label[39m=[32m"File upload zone"[39m
                        [33mclass[39m=[32m"upload-zone upload-zone--desktop upload-zone--lg"[39m
                        [33mdata-testid[39m=[32m"upload-zone"[39m
                        [33mrole[39m=[32m"button"[39m
                        [33mtabindex[39m=[32m"0"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"upload-zone-content "[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"upload-instructions "[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-icon "[39m
                            [36m>[39m
                              [0m‚¨ÜÔ∏è[0m
                            [36m</div>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-text"[39m
                            [36m>[39m
                              [36m<p>[39m
                                [36m<strong[39m
                                  [33mclass[39m=[32m"tengwar-text "[39m
                                [36m>[39m
                                  [0mUpload your text file[0m
                                [36m</strong>[39m
                              [36m</p>[39m
                              [36m<p[39m
                                [33mclass[39m=[32m"tengwar-text"[39m
                              [36m>[39m
                                [0mor[0m
                                [0m [0m
                                [36m<button[39m
                                  [33mclass[39m=[32m"browse-button tengwar-text"[39m
                                  [33mtype[39m=[32m"button"[39m
                                [36m>[39m
                                  [0mbrowse[0m
                                [36m</button>[39m
                                [0m [0m
                                [0mto select[0m
                              [36m</p>[39m
                            [36m</div>[39m
                          [36m</div>[39m
                        [36m</div>[39m
                        [36m<input[39m
                          [33maccept[39m=[32m".txt"[39m
                          [33maria-describedby[39m=[32m"upload-instructions"[39m
                          [33mclass[39m=[32m"file-input"[39m
                          [33mdata-testid[39m=[32m"file-input"[39m
                          [33mtype[39m=[32m"file"[39m
                        [36m/>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"upload-requirements"[39m
                        [33mid[39m=[32m"upload-instructions"[39m
                      [36m>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mText files (.txt)[0m
                          [0m ‚Ä¢ [0m
                          [0mMax 10MB[0m
                        [36m</p>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mTwo columns of integers separated by spaces[0m
                        [36m</p>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33maria-live[39m=[32m"polite"[39m
                        [33mclass[39m=[32m"sr-only"[39m
                        [33mrole[39m=[32m"status"[39m
                      [36m/>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</main>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      202 |       
      203 |       // Start in Sindarin
    > 204 |       expect(screen.getByText('3r9n`i0j')).toBeInTheDocument();
          |                     ^
      205 |       
      206 |       // Switch to English
      207 |       await userEvent.click(screen.getByText('Hobbitish'));

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (../node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/personas/language-switching.test.tsx:204:21)

  ‚óè Language Switching - Persona-Based Testing ‚Ä∫ Performance and User Experience ‚Ä∫ language switching has minimal performance impact

    TestingLibraryElementError: Unable to find an element with the text: Hobbitish. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App   desktop-app"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div[39m
                [33mclass[39m=[32m"header-content"[39m
              [36m>[39m
                [36m<h1[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mChronicler[0m
                [36m</h1>[39m
                [36m<p[39m
                  [33mclass[39m=[32m"tengwar-text "[39m
                [36m>[39m
                  [0mDistance Calculation Tool[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<div[39m
                [33mclass[39m=[32m"language-toggle-container"[39m
              [36m>[39m
                [36m<div[39m
                  [33mclass[39m=[32m"language-toggle-container header-language-toggle"[39m
                [36m>[39m
                  [36m<button[39m
                    [33maria-label[39m=[32m"Switch to Hobbit (English) language"[39m
                    [33mclass[39m=[32m"language-toggle language-toggle--small elvish-mode"[39m
                    [33mtitle[39m=[32m"Currently in Elf (Sindarin) mode. Click to switch."[39m
                  [36m>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__icon"[39m
                    [36m>[39m
                      [0müßô‚Äç‚ôÇÔ∏è[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__text"[39m
                    [36m>[39m
                      [0mHobbit (English)[0m
                    [36m</span>[39m
                    [36m<span[39m
                      [33mclass[39m=[32m"language-toggle__arrow"[39m
                    [36m>[39m
                      [0m‚ü∑[0m
                    [36m</span>[39m
                  [36m</button>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</header>[39m
          [36m<main[39m
            [33mclass[39m=[32m"App-main "[39m
          [36m>[39m
            [36m<div[39m
              [33mclass[39m=[32m"container"[39m
            [36m>[39m
              [36m<div>[39m
                [36m<div>[39m
                  [36m<div[39m
                    [33mclass[39m=[32m"upload-section "[39m
                  [36m>[39m
                    [36m<div[39m
                      [33mclass[39m=[32m"file-upload-component"[39m
                    [36m>[39m
                      [36m<div[39m
                        [33maria-describedby[39m=[32m"upload-instructions"[39m
                        [33maria-label[39m=[32m"File upload zone"[39m
                        [33mclass[39m=[32m"upload-zone upload-zone--desktop upload-zone--lg"[39m
                        [33mdata-testid[39m=[32m"upload-zone"[39m
                        [33mrole[39m=[32m"button"[39m
                        [33mtabindex[39m=[32m"0"[39m
                      [36m>[39m
                        [36m<div[39m
                          [33mclass[39m=[32m"upload-zone-content "[39m
                        [36m>[39m
                          [36m<div[39m
                            [33mclass[39m=[32m"upload-instructions "[39m
                          [36m>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-icon "[39m
                            [36m>[39m
                              [0m‚¨ÜÔ∏è[0m
                            [36m</div>[39m
                            [36m<div[39m
                              [33mclass[39m=[32m"upload-text"[39m
                            [36m>[39m
                              [36m<p>[39m
                                [36m<strong[39m
                                  [33mclass[39m=[32m"tengwar-text "[39m
                                [36m>[39m
                                  [0mUpload your text file[0m
                                [36m</strong>[39m
                              [36m</p>[39m
                              [36m<p[39m
                                [33mclass[39m=[32m"tengwar-text"[39m
                              [36m>[39m
                                [0mor[0m
                                [0m [0m
                                [36m<button[39m
                                  [33mclass[39m=[32m"browse-button tengwar-text"[39m
                                  [33mtype[39m=[32m"button"[39m
                                [36m>[39m
                                  [0mbrowse[0m
                                [36m</button>[39m
                                [0m [0m
                                [0mto select[0m
                              [36m</p>[39m
                            [36m</div>[39m
                          [36m</div>[39m
                        [36m</div>[39m
                        [36m<input[39m
                          [33maccept[39m=[32m".txt"[39m
                          [33maria-describedby[39m=[32m"upload-instructions"[39m
                          [33mclass[39m=[32m"file-input"[39m
                          [33mdata-testid[39m=[32m"file-input"[39m
                          [33mtype[39m=[32m"file"[39m
                        [36m/>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33mclass[39m=[32m"upload-requirements"[39m
                        [33mid[39m=[32m"upload-instructions"[39m
                      [36m>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mText files (.txt)[0m
                          [0m ‚Ä¢ [0m
                          [0mMax 10MB[0m
                        [36m</p>[39m
                        [36m<p[39m
                          [33mclass[39m=[32m"tengwar-text"[39m
                        [36m>[39m
                          [0mTwo columns of integers separated by spaces[0m
                        [36m</p>[39m
                      [36m</div>[39m
                      [36m<div[39m
                        [33maria-live[39m=[32m"polite"[39m
                        [33mclass[39m=[32m"sr-only"[39m
                        [33mrole[39m=[32m"status"[39m
                      [36m/>[39m
                    [36m</div>[39m
                  [36m</div>[39m
                [36m</div>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</main>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

      247 |       // Perform multiple language switches
      248 |       for (let i = 0; i < 5; i++) {
    > 249 |         await userEvent.click(screen.getByText(i % 2 === 0 ? 'Hobbitish' : 'Sindarin'));
          |                                      ^
      250 |         await waitFor(() => {
      251 |           (global as any).mockLanguage = i % 2 === 0 ? 'english' : 'sindarin';
      252 |         });

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByText (../node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/personas/language-switching.test.tsx:249:38)

FAIL src/tests/unit/components/MobileNavigation.test.tsx
  ‚óè Console

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

  ‚óè MobileNavigation Component ‚Ä∫ Navigation Menu ‚Ä∫ should have proper touch-friendly spacing

    TestingLibraryElementError: Unable to find an accessible element with the role "button" and name `/Submit|View|Documentation/`

    Here are the accessible roles:

      navigation:

      Name "Mobile navigation":
      [36m<nav[39m
        [33maria-label[39m=[32m"Mobile navigation"[39m
        [33mclass[39m=[32m"mobile-nav "[39m
      [36m/>[39m

      --------------------------------------------------
      button:

      Name "Toggle navigation menu":
      [36m<button[39m
        [33maria-controls[39m=[32m"mobile-nav-menu-5d63s9wv0"[39m
        [33maria-expanded[39m=[32m"true"[39m
        [33maria-label[39m=[32m"Toggle navigation menu"[39m
        [33mclass[39m=[32m"nav-toggle"[39m
        [33mtype[39m=[32m"button"[39m
      [36m/>[39m

      --------------------------------------------------
      menu:

      Name "":
      [36m<div[39m
        [33maria-hidden[39m=[32m"false"[39m
        [33mclass[39m=[32m"nav-menu open"[39m
        [33mdata-testid[39m=[32m"nav-menu"[39m
        [33mid[39m=[32m"mobile-nav-menu-5d63s9wv0"[39m
        [33mrole[39m=[32m"menu"[39m
      [36m/>[39m

      --------------------------------------------------
      menuitem:

      Name "Navigate to Submit Chronicle Lists":
      [36m<button[39m
        [33maria-label[39m=[32m"Navigate to Submit Chronicle Lists"[39m
        [33mclass[39m=[32m"nav-item"[39m
        [33mrole[39m=[32m"menuitem"[39m
        [33mtabindex[39m=[32m"0"[39m
      [36m/>[39m

      Name "Navigate to View Results":
      [36m<button[39m
        [33maria-label[39m=[32m"Navigate to View Results"[39m
        [33mclass[39m=[32m"nav-item"[39m
        [33mrole[39m=[32m"menuitem"[39m
        [33mtabindex[39m=[32m"0"[39m
      [36m/>[39m

      Name "Navigate to Documentation":
      [36m<button[39m
        [33maria-label[39m=[32m"Navigate to Documentation"[39m
        [33mclass[39m=[32m"nav-item"[39m
        [33mrole[39m=[32m"menuitem"[39m
        [33mtabindex[39m=[32m"0"[39m
      [36m/>[39m

      --------------------------------------------------

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<nav[39m
          [33maria-label[39m=[32m"Mobile navigation"[39m
          [33mclass[39m=[32m"mobile-nav "[39m
        [36m>[39m
          [36m<button[39m
            [33maria-controls[39m=[32m"mobile-nav-menu-5d63s9wv0"[39m
            [33maria-expanded[39m=[32m"true"[39m
            [33maria-label[39m=[32m"Toggle navigation menu"[39m
            [33mclass[39m=[32m"nav-toggle"[39m
            [33mtype[39m=[32m"button"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"hamburger-line"[39m
              [33mdata-testid[39m=[32m"hamburger-line-1"[39m
            [36m/>[39m
            [36m<span[39m
              [33mclass[39m=[32m"hamburger-line"[39m
              [33mdata-testid[39m=[32m"hamburger-line-2"[39m
            [36m/>[39m
            [36m<span[39m
              [33mclass[39m=[32m"hamburger-line"[39m
              [33mdata-testid[39m=[32m"hamburger-line-3"[39m
            [36m/>[39m
          [36m</button>[39m
          [36m<div[39m
            [33maria-hidden[39m=[32m"false"[39m
            [33mclass[39m=[32m"nav-menu open"[39m
            [33mdata-testid[39m=[32m"nav-menu"[39m
            [33mid[39m=[32m"mobile-nav-menu-5d63s9wv0"[39m
            [33mrole[39m=[32m"menu"[39m
          [36m>[39m
            [36m<button[39m
              [33maria-label[39m=[32m"Navigate to Submit Chronicle Lists"[39m
              [33mclass[39m=[32m"nav-item"[39m
              [33mrole[39m=[32m"menuitem"[39m
              [33mtabindex[39m=[32m"0"[39m
            [36m>[39m
              [0mSubmit Chronicle Lists[0m
            [36m</button>[39m
            [36m<button[39m
              [33maria-label[39m=[32m"Navigate to View Results"[39m
              [33mclass[39m=[32m"nav-item"[39m
              [33mrole[39m=[32m"menuitem"[39m
              [33mtabindex[39m=[32m"0"[39m
            [36m>[39m
              [0mView Results[0m
            [36m</button>[39m
            [36m<button[39m
              [33maria-label[39m=[32m"Navigate to Documentation"[39m
              [33mclass[39m=[32m"nav-item"[39m
              [33mrole[39m=[32m"menuitem"[39m
              [33mtabindex[39m=[32m"0"[39m
            [36m>[39m
              [0mDocumentation[0m
            [36m</button>[39m
          [36m</div>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</body>[39m

      195 |       await user.click(toggleButton);
      196 |
    > 197 |       const menuItems = screen.getAllByRole('button', { name: /Submit|View|Documentation/ });
          |                                ^
      198 |       
      199 |       // Each menu item should have appropriate CSS classes for touch targets
      200 |       menuItems.forEach(item => {

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at getAllByRole (../node_modules/@testing-library/dom/dist/query-helpers.js:109:15)
      at Object.<anonymous> (src/tests/unit/components/MobileNavigation.test.tsx:197:32)

  ‚óè MobileNavigation Component ‚Ä∫ Keyboard Navigation ‚Ä∫ should handle Tab navigation within menu

    expect(element).toHaveFocus()

    Expected element with focus:
      <button aria-label="Navigate to Submit Chronicle Lists" class="nav-item" role="menuitem" tabindex="0">Submit Chronicle Lists</button>
    Received element with focus:
      <button aria-label="Navigate to View Results" class="nav-item" role="menuitem" tabindex="0">View Results</button>

      264 |       // Tab through menu items
      265 |       await user.keyboard('{Tab}');
    > 266 |       expect(screen.getByText('Submit Chronicle Lists')).toHaveFocus();
          |                                                          ^
      267 |
      268 |       await user.keyboard('{Tab}');
      269 |       expect(screen.getByText('View Results')).toHaveFocus();

      at Object.<anonymous> (src/tests/unit/components/MobileNavigation.test.tsx:266:58)

  ‚óè MobileNavigation Component ‚Ä∫ Touch Gestures ‚Ä∫ should handle touch events on toggle button

    expect(element).toHaveAttribute("aria-expanded", "true") // element.getAttribute("aria-expanded") === "true"

    Expected the element to have attribute:
      aria-expanded="true"
    Received:
      aria-expanded="false"

      292 |       fireEvent.touchEnd(toggleButton);
      293 |       
    > 294 |       expect(toggleButton).toHaveAttribute('aria-expanded', 'true');
          |                            ^
      295 |     });
      296 |
      297 |     test('should close menu when touching outside', async () => {

      at Object.<anonymous> (src/tests/unit/components/MobileNavigation.test.tsx:294:28)

  ‚óè MobileNavigation Component ‚Ä∫ Touch Gestures ‚Ä∫ should close menu when touching outside

    TestingLibraryElementError: Unable to find an element by: [data-testid="mobile-navigation"]

    Ignored nodes: comments, script, style
    [36m<body>[39m
      [36m<div>[39m
        [36m<nav[39m
          [33maria-label[39m=[32m"Mobile navigation"[39m
          [33mclass[39m=[32m"mobile-nav "[39m
        [36m>[39m
          [36m<button[39m
            [33maria-controls[39m=[32m"mobile-nav-menu-iu4zm5om6"[39m
            [33maria-expanded[39m=[32m"true"[39m
            [33maria-label[39m=[32m"Toggle navigation menu"[39m
            [33mclass[39m=[32m"nav-toggle"[39m
            [33mtype[39m=[32m"button"[39m
          [36m>[39m
            [36m<span[39m
              [33mclass[39m=[32m"hamburger-line"[39m
              [33mdata-testid[39m=[32m"hamburger-line-1"[39m
            [36m/>[39m
            [36m<span[39m
              [33mclass[39m=[32m"hamburger-line"[39m
              [33mdata-testid[39m=[32m"hamburger-line-2"[39m
            [36m/>[39m
            [36m<span[39m
              [33mclass[39m=[32m"hamburger-line"[39m
              [33mdata-testid[39m=[32m"hamburger-line-3"[39m
            [36m/>[39m
          [36m</button>[39m
          [36m<div[39m
            [33maria-hidden[39m=[32m"false"[39m
            [33mclass[39m=[32m"nav-menu open"[39m
            [33mdata-testid[39m=[32m"nav-menu"[39m
            [33mid[39m=[32m"mobile-nav-menu-iu4zm5om6"[39m
            [33mrole[39m=[32m"menu"[39m
          [36m>[39m
            [36m<button[39m
              [33maria-label[39m=[32m"Navigate to Submit Chronicle Lists"[39m
              [33mclass[39m=[32m"nav-item"[39m
              [33mrole[39m=[32m"menuitem"[39m
              [33mtabindex[39m=[32m"0"[39m
            [36m>[39m
              [0mSubmit Chronicle Lists[0m
            [36m</button>[39m
            [36m<button[39m
              [33maria-label[39m=[32m"Navigate to View Results"[39m
              [33mclass[39m=[32m"nav-item"[39m
              [33mrole[39m=[32m"menuitem"[39m
              [33mtabindex[39m=[32m"0"[39m
            [36m>[39m
              [0mView Results[0m
            [36m</button>[39m
            [36m<button[39m
              [33maria-label[39m=[32m"Navigate to Documentation"[39m
              [33mclass[39m=[32m"nav-item"[39m
              [33mrole[39m=[32m"menuitem"[39m
              [33mtabindex[39m=[32m"0"[39m
            [36m>[39m
              [0mDocumentation[0m
            [36m</button>[39m
          [36m</div>[39m
        [36m</nav>[39m
      [36m</div>[39m
    [36m</body>[39m

      305 |
      306 |       // Touch outside (simulate by firing click on document)
    > 307 |       fireEvent.click(screen.getByTestId('mobile-navigation'));
          |                              ^
      308 |       
      309 |       await waitFor(() => {
      310 |         expect(toggleButton).toHaveAttribute('aria-expanded', 'false');

      at Object.getElementError (../node_modules/@testing-library/dom/dist/config.js:37:19)
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:76:38
      at ../node_modules/@testing-library/dom/dist/query-helpers.js:52:17
      at getByTestId (../node_modules/@testing-library/dom/dist/query-helpers.js:95:19)
      at Object.<anonymous> (src/tests/unit/components/MobileNavigation.test.tsx:307:30)

  ‚óè MobileNavigation Component ‚Ä∫ Accessibility ‚Ä∫ should work with screen readers

    expect(received).toBeGreaterThan(expected)

    Expected: > 1
    Received:   1

      374 |       // Check that menu items have proper roles and labels
      375 |       const menuItems = screen.getAllByRole('button');
    > 376 |       expect(menuItems.length).toBeGreaterThan(1);
          |                                ^
      377 |       
      378 |       menuItems.forEach(item => {
      379 |         expect(item).toBeVisible();

      at Object.<anonymous> (src/tests/unit/components/MobileNavigation.test.tsx:376:32)

  ‚óè MobileNavigation Component ‚Ä∫ Error Handling ‚Ä∫ should handle responsive hook errors

    expect(received).not.toThrow()

    Error name:    "TypeError"
    Error message: "Cannot destructure property 'isMobile' of '(0 , _useResponsive.useResponsive)(...)' as it is null."

          48 |   items
          49 | }) => {
        > 50 |   const { isMobile } = useResponsive();
             |           ^
          51 |   const [isOpen, setIsOpen] = useState(false);
          52 |   const menuRef = useRef<HTMLDivElement>(null);
          53 |   const toggleRef = useRef<HTMLButtonElement>(null);

      at MobileNavigation (src/components/MobileNavigation.tsx:50:11)
      at Object.react-stack-bottom-frame (node_modules/react-dom/cjs/react-dom-client.development.js:23863:20)
      at renderWithHooks (node_modules/react-dom/cjs/react-dom-client.development.js:5529:22)
      at updateFunctionComponent (node_modules/react-dom/cjs/react-dom-client.development.js:8897:19)
      at beginWork (node_modules/react-dom/cjs/react-dom-client.development.js:10522:18)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15140:22)
      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)
      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)
      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14462:44)
      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at Object.<anonymous>.process.env.NODE_ENV.exports.act (node_modules/react/cjs/react.development.js:859:10)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at customRender (src/tests/utils/test-utils.tsx:35:16)
      at src/tests/unit/components/MobileNavigation.test.tsx:456:15
      at Object.<anonymous> (node_modules/expect/build/toThrowMatchers.js:83:11)
      at Object.toThrow (node_modules/expect/build/index.js:382:21)
      at Object.<anonymous> (src/tests/unit/components/MobileNavigation.test.tsx:457:14)
      at Object.<anonymous> (src/tests/unit/components/MobileNavigation.test.tsx:457:14)

PASS src/tests/unit/components/loading/LoadingOverlay.test.tsx
  ‚óè Console

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

PASS src/components/ResultsDisplayComponent.test.tsx
  ‚óè Console

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

PASS src/tests/unit/components/ResponsiveTable.test.tsx
  ‚óè Console

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

PASS src/tests/unit/components/loading/ProgressBar.test.tsx
  ‚óè Console

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

PASS src/tests/unit/components/loading/Skeleton.test.tsx
  ‚óè Console

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

PASS src/components/FileUploadComponent.test.tsx
  ‚óè Console

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

PASS src/tests/unit/contexts/LoadingStateProvider.test.tsx
PASS src/tests/unit/components/loading/Spinner.test.tsx
  ‚óè Console

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

    console.error
      An update to LanguageProvider inside a test was not wrapped in act(...).
      
      When testing, code that causes React state updates should be wrapped into act(...):
      
      act(() => {
        /* fire events that update state */
      });
      /* assert on the output */
      
      This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act

      189 |       
      190 |       // Load Tengwar font asynchronously
    > 191 |       setIsFontLoading(true);
          |       ^
      192 |       const fontLoaded = await TengwarFontManager.loadTengwarFont();
      193 |       setTengwarFontLoaded(fontLoaded);
      194 |       setIsFontLoading(false);

      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at setIsFontLoading (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at initializeLanguageSettings (src/contexts/LanguageContext.tsx:191:7)

PASS src/tests/unit/components/ResponsiveWrapper.test.tsx
PASS src/tests/unit/hooks/useFieldValidation.test.tsx
PASS src/tests/unit/hooks/useResponsive.test.ts
PASS src/tests/unit/hooks/useFormValidation.test.tsx
PASS src/tests/unit/hooks/useLoadingStates.test.ts
PASS src/App.test.tsx
PASS src/tests/unit/hooks/useApiIntegration.basic.test.ts
PASS src/tests/unit/utils/TengwarTranslator.test.ts
PASS src/tests/unit/utils/ValidationEngine.test.ts

Test Suites: 2 failed, 1 skipped, 17 passed, 19 of 20 total
Tests:       15 failed, 15 skipped, 375 passed, 405 total
Snapshots:   0 total
Time:        3.757 s
Ran all test suites.
npm error Lifecycle script `test` failed with error:
npm error code 1
npm error path /home/philipp/Workspace/chronicler-app/frontend
npm error workspace frontend@0.1.0
npm error location /home/philipp/Workspace/chronicler-app/frontend
npm error command failed
npm error command sh -c react-scripts test --maxWorkers=2 --watchAll=false
